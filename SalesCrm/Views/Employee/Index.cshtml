@using SalesCrm.Views.Components.Pagination
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model SalesCrm.Views.Components.Pagination.PaginationList<SalesCrm.Controllers.ViewModels.EmployeeListViewModel>

@{
    ViewData["Title"] = "Employee List";
}

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">

                @* <nav aria-label="breadcrumb"> *@
                @*     <ol class="breadcrumb" style="padding:1px !important"> *@
                @*         <li class="breadcrumb-item"> *@
                @*             <a asp-controller="News" asp-action="Index">Home</a> *@
                @*         </li> *@
                @*         <li class="breadcrumb-item"> *@
                @*             <a asp-action="Index">Employee List</a> *@
                @*         </li> *@
                @*     </ol> *@
                @* </nav> *@

                <div class="row">
                    <div class="col-md-4">
                        @using (Html.BeginForm("Index", "Employee", FormMethod.Get))
                        {
                            @await Html.PartialAsync("_SearcherPartial")
                        }
                    </div>

                    <div class="col-md-7" style="padding-top:30px">
                        <div class="text-md-end">
                            <a asp-action="Create" class="btn btn-outline-success">
                                Create new Employee
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <table id="employeeTable" class="table table-striped">
                <thead>
                <tr>
                    <th onclick="sortTable('Name')">
                        Name
                        <span id="nameFilter" class="filter-icon">&#x25B2;</span>
                    </th>

                    <th>Gender</th>
                    <th>Photo</th>
                    <th>Data Joined</th>
                    <th>Designation</th>
                    <th>City</th>
                    <th style="text-align:center">Actions</th>
                </tr>
                </thead>
                <tbody>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(eml => item.Name)</td>
                        <td>@Html.DisplayFor(eml => item.Gender)</td>
                        <td>
                            <img alt="Image" src="@Url.Content(item.ImageName)" width="40" height="40"
                                 style="border-radius:10px"/>
                        </td>
                        <td>@Html.DisplayFor(eml => item.DateJoined)</td>
                        <td>@Html.DisplayFor(eml => item.Designation)</td>
                        <td>@Html.DisplayFor(eml => item.City)</td>
                        <td style="text-align:center">
                            <button class="btn btn-outline-primary button"
                                    onclick="location.href='@Url.Action("edit", new {id = item.Id, imageName = item.ImageName})'">
                                edit
                            </button>
                            <button class="btn btn-outline-danger button"
                                    onclick="showConfirmationDialog(event, 'Are you sure you want to delete this news?',
                                    '@Url.Action("DeleteEmployee", new {id = item.Id})')">
                                delete
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@Html.Partial("../Components/Pagination/_Pagination", new PaginationViewModel
{
    ActionName = "Index",
    PageNumber = Model.PageNumber,
    PageSize = Model.PageSize,
    IsPreviousPageAvailable = Model.IsPreviousPageAvailable,
    IsNextPageAvailable = Model.IsNextPageAvailable,
    TotalPages = Model.TotalPages
})

@section Scripts {

    @Html.Partial("../Components/DeleteModal/_DeleteConfirmationModal")

    <script>
   
       // Add filters for other fields in the table
       var filters = {'Name': ''};
   
       function sortTable(columnName) {
           var table = document.getElementById("employeeTable");
           var rows = table.rows;
           var arrowUpSymbol = "&#x25B2;";
           var arrowDownSymbol = "&#x25BC;";
   
           // Clear All Filters in Column Headers
           var filterElements = document.querySelectorAll("th span[id$='Filter']");
           for (var i = 0; i < filterElements.length; i++) {
               filterElements[i].innerHTML = '';
           }
   
           // Define Sort Direction
           var sortOrder = arrowUpSymbol;
           if (columnName === table.getAttribute("data-sort-column") && table.getAttribute("data-sort-order") === arrowUpSymbol) {
               sortOrder = arrowDownSymbol;
           }
   
           // Set Filter in Column Header
           var filterElement = document.getElementById(columnName.toLowerCase() + "Filter");
           filterElement.innerHTML = sortOrder;
   
           // Save information about the current filter and sorting in table attributes
           table.setAttribute("data-sort-column", columnName);
           table.setAttribute("data-sort-order", sortOrder);
   
           // Updating Filters
           filters[columnName] = sortOrder === arrowUpSymbol ? 'asc' : 'desc';
   
           // Sorting Table Rows
           var sortIndex = filterElement.parentNode.cellIndex;
           var sortArray = [];
           for (var i = 1; i < rows.length; i++) {
               var row = rows[i];
               var cellValue = row.cells[sortIndex].textContent || row.cells[sortIndex].innerText;
               sortArray.push([cellValue, row]);
           }
   
           sortArray.sort(function(a, b) {
               return a[0].localeCompare(b[0]);
           });
   
           if (filters[columnName] === 'desc') {
               sortArray.reverse();
           }
   
           for (var i = 0; i < sortArray.length; i++) {
               table.tBodies[0].appendChild(sortArray[i][1]);
           }
       }
   </script>
}

<style>
    .filter-icon {
       color: #5b4ea1;
    }
          
    th:hover .filter-icon {
       display: inline-block;
    }
      
    th:hover {
       cursor: pointer;
    }
    
    .button {
       padding:0rem 0.9rem
    }
</style>